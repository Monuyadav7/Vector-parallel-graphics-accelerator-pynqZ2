ARM GAS  /tmp/ccG4Ri7g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./inc -imultilib armv6-m
  18              	@ -iprefix /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/
  19              	@ -isysroot /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../arm-none-eabi
  20              	@ -MD code/main.d -MF .dep/main.o.d -MP -MQ code/main.o -D__USES_INITFINI__
  21              	@ -D RUN_FROM_FLASH=1 code/main.c -mcpu=cortex-m0 -mthumb
  22              	@ -auxbase-strip code/main.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  23              	@ -fomit-frame-pointer -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  30              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
  31              	@ -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  32              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  33              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse
  34              	@ -flto-odr-type-merging -fmath-errno -fmerge-debug-strings
  35              	@ -fomit-frame-pointer -fpeephole -fprefetch-loop-arrays
  36              	@ -freg-struct-return -fsched-critical-path-heuristic
  37              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  38              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  39              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  40              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  42              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  43              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  45              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  46              	@ -fzero-initialized-in-bss -mlittle-endian -mpic-data-is-text-relative
  47              	@ -msched-prolog -mthumb -mvectorize-with-neon-quad
  48              	
  49              		.text
  50              	.Ltext0:
  51              		.cfi_sections	.debug_frame
  52              		.global	SW_REGS
  53              		.data
  54              		.align	2
  55              		.type	SW_REGS, %object
  56              		.size	SW_REGS, 4
  57              	SW_REGS:
ARM GAS  /tmp/ccG4Ri7g.s 			page 2


  58 0000 00000040 		.word	1073741824
  59              		.global	PIX_REGS
  60              		.align	2
  61              		.type	PIX_REGS, %object
  62              		.size	PIX_REGS, 4
  63              	PIX_REGS:
  64 0004 00000050 		.word	1342177280
  65              		.text
  66              		.align	2
  67              		.global	write_pix
  68              		.code	16
  69              		.thumb_func
  70              		.type	write_pix, %function
  71              	write_pix:
  72              	.LFB0:
  73              		.file 1 "code/main.c"
   1:code/main.c   **** #define __MAIN_C__
   2:code/main.c   **** 
   3:code/main.c   **** #include <stdint.h>
   4:code/main.c   **** #include <stdbool.h>
   5:code/main.c   **** 
   6:code/main.c   **** // Define the raw base address values for the i/o devices
   7:code/main.c   **** 
   8:code/main.c   **** #define AHB_SW_BASE                             0x40000000
   9:code/main.c   **** #define AHB_PIX_BASE                            0x50000000
  10:code/main.c   **** 
  11:code/main.c   **** // Define pointers with correct type for access to 32-bit i/o devices
  12:code/main.c   **** volatile uint32_t* SW_REGS = (volatile uint32_t*) AHB_SW_BASE;
  13:code/main.c   **** volatile uint32_t* PIX_REGS = (volatile uint32_t*) AHB_PIX_BASE;
  14:code/main.c   **** 
  15:code/main.c   **** #include <stdint.h>
  16:code/main.c   **** 
  17:code/main.c   **** /////////////////////////////////////////////////////////////////
  18:code/main.c   **** // Functions provided to access i/o devices
  19:code/main.c   **** ////////////////////////////////////////////////////////////////
  20:code/main.c   **** void write_pix(int x, int y, int colour) {
  74              		.loc 1 20 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 24
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 86B0     		sub	sp, sp, #24	@,,
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 24
  82 0002 0390     		str	r0, [sp, #12]	@ x, x
  83 0004 0291     		str	r1, [sp, #8]	@ y, y
  84 0006 0192     		str	r2, [sp, #4]	@ colour, colour
  21:code/main.c   ****   int pix_address ;
  22:code/main.c   ****   pix_address = x + 640*y ;
  85              		.loc 1 22 0
  86 0008 029A     		ldr	r2, [sp, #8]	@ tmp116, y
  87 000a 1300     		movs	r3, r2	@ tmp117, tmp116
  88 000c 9B00     		lsls	r3, r3, #2	@ tmp117, tmp117,
  89 000e 9B18     		adds	r3, r3, r2	@ tmp117, tmp117, tmp116
  90 0010 DB01     		lsls	r3, r3, #7	@ tmp118, tmp117,
  91 0012 1A00     		movs	r2, r3	@ D.4275, tmp117
  92 0014 039B     		ldr	r3, [sp, #12]	@ tmp120, x
ARM GAS  /tmp/ccG4Ri7g.s 			page 3


  93 0016 D318     		adds	r3, r2, r3	@ tmp119, D.4275, tmp120
  94 0018 0593     		str	r3, [sp, #20]	@ tmp119, pix_address
  23:code/main.c   ****   PIX_REGS[pix_address] = colour;
  95              		.loc 1 23 0
  96 001a 054B     		ldr	r3, .L2	@ tmp121,
  97 001c 1A68     		ldr	r2, [r3]	@ D.4276, PIX_REGS
  98 001e 059B     		ldr	r3, [sp, #20]	@ D.4277, pix_address
  99 0020 9B00     		lsls	r3, r3, #2	@ D.4277, D.4277,
 100 0022 D318     		adds	r3, r2, r3	@ D.4276, D.4276, D.4277
 101 0024 019A     		ldr	r2, [sp, #4]	@ D.4278, colour
 102 0026 1A60     		str	r2, [r3]	@ D.4278, *_9
  24:code/main.c   **** }
 103              		.loc 1 24 0
 104 0028 C046     		nop
 105 002a 06B0     		add	sp, sp, #24	@,,
 106              		@ sp needed	@
 107 002c 7047     		bx	lr
 108              	.L3:
 109 002e C046     		.align	2
 110              	.L2:
 111 0030 00000000 		.word	PIX_REGS
 112              		.cfi_endproc
 113              	.LFE0:
 114              		.size	write_pix, .-write_pix
 115              		.align	2
 116              		.global	read_switches
 117              		.code	16
 118              		.thumb_func
 119              		.type	read_switches, %function
 120              	read_switches:
 121              	.LFB1:
  25:code/main.c   **** 
  26:code/main.c   **** 
  27:code/main.c   **** uint32_t read_switches(int addr) {
 122              		.loc 1 27 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127 0034 82B0     		sub	sp, sp, #8	@,,
 128              	.LCFI1:
 129              		.cfi_def_cfa_offset 8
 130 0036 0190     		str	r0, [sp, #4]	@ addr, addr
  28:code/main.c   **** 
  29:code/main.c   ****   return SW_REGS[addr];
 131              		.loc 1 29 0
 132 0038 044B     		ldr	r3, .L6	@ tmp116,
 133 003a 1A68     		ldr	r2, [r3]	@ D.4279, SW_REGS
 134 003c 019B     		ldr	r3, [sp, #4]	@ D.4280, addr
 135 003e 9B00     		lsls	r3, r3, #2	@ D.4280, D.4280,
 136 0040 D318     		adds	r3, r2, r3	@ D.4279, D.4279, D.4280
 137 0042 1B68     		ldr	r3, [r3]	@ D.4281, *_6
  30:code/main.c   **** 
  31:code/main.c   **** }
 138              		.loc 1 31 0
 139 0044 1800     		movs	r0, r3	@, <retval>
 140 0046 02B0     		add	sp, sp, #8	@,,
ARM GAS  /tmp/ccG4Ri7g.s 			page 4


 141              		@ sp needed	@
 142 0048 7047     		bx	lr
 143              	.L7:
 144 004a C046     		.align	2
 145              	.L6:
 146 004c 00000000 		.word	SW_REGS
 147              		.cfi_endproc
 148              	.LFE1:
 149              		.size	read_switches, .-read_switches
 150              		.align	2
 151              		.global	check_switches
 152              		.code	16
 153              		.thumb_func
 154              		.type	check_switches, %function
 155              	check_switches:
 156              	.LFB2:
  32:code/main.c   **** 
  33:code/main.c   **** bool check_switches(int addr) {
 157              		.loc 1 33 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 16
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162 0050 84B0     		sub	sp, sp, #16	@,,
 163              	.LCFI2:
 164              		.cfi_def_cfa_offset 16
 165 0052 0190     		str	r0, [sp, #4]	@ addr, addr
  34:code/main.c   **** 
  35:code/main.c   ****   int status, switches_ready;
  36:code/main.c   ****   
  37:code/main.c   ****   status = SW_REGS[2];
 166              		.loc 1 37 0
 167 0054 094B     		ldr	r3, .L10	@ tmp116,
 168 0056 1B68     		ldr	r3, [r3]	@ D.4282, SW_REGS
 169 0058 0833     		adds	r3, r3, #8	@ D.4282,
 170 005a 1B68     		ldr	r3, [r3]	@ D.4283, *_3
 171 005c 0393     		str	r3, [sp, #12]	@ D.4283, status
  38:code/main.c   ****   
  39:code/main.c   ****   // use the addr value to select one bit of the status register
  40:code/main.c   ****   switches_ready = (status >> addr) & 1;
 172              		.loc 1 40 0
 173 005e 039A     		ldr	r2, [sp, #12]	@ tmp117, status
 174 0060 019B     		ldr	r3, [sp, #4]	@ tmp118, addr
 175 0062 1A41     		asrs	r2, r2, r3	@ tmp117, tmp117, tmp118
 176 0064 1300     		movs	r3, r2	@ D.4284, tmp117
 177 0066 0122     		movs	r2, #1	@ tmp120,
 178 0068 1340     		ands	r3, r2	@ tmp119, tmp120
 179 006a 0293     		str	r3, [sp, #8]	@ tmp119, switches_ready
  41:code/main.c   ****   
  42:code/main.c   ****   return (switches_ready == 1);
 180              		.loc 1 42 0
 181 006c 029B     		ldr	r3, [sp, #8]	@ tmp122, switches_ready
 182 006e 013B     		subs	r3, r3, #1	@ tmp124,
 183 0070 5A42     		rsbs	r2, r3, #0	@ tmp125, tmp124
 184 0072 5341     		adcs	r3, r3, r2	@ tmp123, tmp124, tmp125
 185 0074 DBB2     		uxtb	r3, r3	@ D.4285, tmp121
  43:code/main.c   **** 
ARM GAS  /tmp/ccG4Ri7g.s 			page 5


  44:code/main.c   **** }
 186              		.loc 1 44 0
 187 0076 1800     		movs	r0, r3	@, <retval>
 188 0078 04B0     		add	sp, sp, #16	@,,
 189              		@ sp needed	@
 190 007a 7047     		bx	lr
 191              	.L11:
 192              		.align	2
 193              	.L10:
 194 007c 00000000 		.word	SW_REGS
 195              		.cfi_endproc
 196              	.LFE2:
 197              		.size	check_switches, .-check_switches
 198              		.align	2
 199              		.global	wait_for_any_switch_data
 200              		.code	16
 201              		.thumb_func
 202              		.type	wait_for_any_switch_data, %function
 203              	wait_for_any_switch_data:
 204              	.LFB3:
  45:code/main.c   **** 
  46:code/main.c   **** void wait_for_any_switch_data(void) {
 205              		.loc 1 46 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
  47:code/main.c   **** 
  48:code/main.c   ****   // this is a 'busy wait'
  49:code/main.c   **** 
  50:code/main.c   ****   //  ( it should only be used if there is nothing
  51:code/main.c   ****   //   else for the embedded system to do )
  52:code/main.c   **** 
  53:code/main.c   ****   while ( SW_REGS[2] == 0 );
 210              		.loc 1 53 0
 211 0080 C046     		nop
 212              	.L13:
 213              		.loc 1 53 0 is_stmt 0 discriminator 1
 214 0082 044B     		ldr	r3, .L15	@ tmp113,
 215 0084 1B68     		ldr	r3, [r3]	@ D.4286, SW_REGS
 216 0086 0833     		adds	r3, r3, #8	@ D.4286,
 217 0088 1B68     		ldr	r3, [r3]	@ D.4287, *_3
 218 008a 002B     		cmp	r3, #0	@ D.4287,
 219 008c F9D0     		beq	.L13	@,
  54:code/main.c   ****   
  55:code/main.c   ****   return;
 220              		.loc 1 55 0 is_stmt 1
 221 008e C046     		nop
  56:code/main.c   **** 
  57:code/main.c   **** }
 222              		.loc 1 57 0
 223              		@ sp needed	@
 224 0090 7047     		bx	lr
 225              	.L16:
 226 0092 C046     		.align	2
 227              	.L15:
 228 0094 00000000 		.word	SW_REGS
ARM GAS  /tmp/ccG4Ri7g.s 			page 6


 229              		.cfi_endproc
 230              	.LFE3:
 231              		.size	wait_for_any_switch_data, .-wait_for_any_switch_data
 232              		.align	2
 233              		.global	main
 234              		.code	16
 235              		.thumb_func
 236              		.type	main, %function
 237              	main:
 238              	.LFB4:
  58:code/main.c   **** 
  59:code/main.c   **** 
  60:code/main.c   **** //////////////////////////////////////////////////////////////////
  61:code/main.c   **** // Main Function
  62:code/main.c   **** //////////////////////////////////////////////////////////////////
  63:code/main.c   **** 
  64:code/main.c   **** int main(void) {
 239              		.loc 1 64 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 8
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0098 00B5     		push	{lr}	@
 244              	.LCFI3:
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 14, -4
 247 009a 83B0     		sub	sp, sp, #12	@,,
 248              	.LCFI4:
 249              		.cfi_def_cfa_offset 16
 250              	.L22:
 251              	.LBB2:
  65:code/main.c   **** 
  66:code/main.c   **** while(1) {
  67:code/main.c   **** 
  68:code/main.c   **** 
  69:code/main.c   **** for (int x = 0 ; x < 99 ; x++){
 252              		.loc 1 69 0
 253 009c 0023     		movs	r3, #0	@ tmp111,
 254 009e 0193     		str	r3, [sp, #4]	@ tmp111, x
 255 00a0 11E0     		b	.L18	@
 256              	.L21:
 257              	.LBB3:
  70:code/main.c   ****     for (int y = 0 ; y <99 ; y++) {
 258              		.loc 1 70 0
 259 00a2 0023     		movs	r3, #0	@ tmp112,
 260 00a4 0093     		str	r3, [sp]	@ tmp112, y
 261 00a6 08E0     		b	.L19	@
 262              	.L20:
  71:code/main.c   ****        write_pix (x,y,1) ;}}
 263              		.loc 1 71 0 discriminator 3
 264 00a8 0099     		ldr	r1, [sp]	@ tmp113, y
 265 00aa 019B     		ldr	r3, [sp, #4]	@ tmp114, x
 266 00ac 0122     		movs	r2, #1	@,
 267 00ae 1800     		movs	r0, r3	@, tmp114
 268 00b0 FFF7FEFF 		bl	write_pix	@
  70:code/main.c   ****     for (int y = 0 ; y <99 ; y++) {
 269              		.loc 1 70 0 discriminator 3
 270 00b4 009B     		ldr	r3, [sp]	@ tmp116, y
ARM GAS  /tmp/ccG4Ri7g.s 			page 7


 271 00b6 0133     		adds	r3, r3, #1	@ tmp115,
 272 00b8 0093     		str	r3, [sp]	@ tmp115, y
 273              	.L19:
  70:code/main.c   ****     for (int y = 0 ; y <99 ; y++) {
 274              		.loc 1 70 0 is_stmt 0 discriminator 1
 275 00ba 009B     		ldr	r3, [sp]	@ tmp117, y
 276 00bc 622B     		cmp	r3, #98	@ tmp117,
 277 00be F3DD     		ble	.L20	@,
 278              	.LBE3:
  69:code/main.c   ****     for (int y = 0 ; y <99 ; y++) {
 279              		.loc 1 69 0 is_stmt 1 discriminator 2
 280 00c0 019B     		ldr	r3, [sp, #4]	@ tmp119, x
 281 00c2 0133     		adds	r3, r3, #1	@ tmp118,
 282 00c4 0193     		str	r3, [sp, #4]	@ tmp118, x
 283              	.L18:
  69:code/main.c   ****     for (int y = 0 ; y <99 ; y++) {
 284              		.loc 1 69 0 is_stmt 0 discriminator 1
 285 00c6 019B     		ldr	r3, [sp, #4]	@ tmp120, x
 286 00c8 622B     		cmp	r3, #98	@ tmp120,
 287 00ca EADD     		ble	.L21	@,
 288              	.LBE2:
  72:code/main.c   ****        }
 289              		.loc 1 72 0 is_stmt 1
 290 00cc E6E7     		b	.L22	@
 291              		.cfi_endproc
 292              	.LFE4:
 293              		.size	main, .-main
 294              	.Letext0:
 295              		.file 2 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 296              		.file 3 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 297 00ce C046     		.section	.debug_info,"",%progbits
 298              	.Ldebug_info0:
 299 0000 D9010000 		.4byte	0x1d9
 300 0004 0200     		.2byte	0x2
 301 0006 00000000 		.4byte	.Ldebug_abbrev0
 302 000a 04       		.byte	0x4
 303 000b 01       		.uleb128 0x1
 304 000c 88000000 		.4byte	.LASF22
 305 0010 0C       		.byte	0xc
 306 0011 97010000 		.4byte	.LASF23
 307 0015 1A000000 		.4byte	.LASF24
 308 0019 00000000 		.4byte	.Ltext0
 309 001d CE000000 		.4byte	.Letext0
 310 0021 00000000 		.4byte	.Ldebug_line0
 311 0025 02       		.uleb128 0x2
 312 0026 01       		.byte	0x1
 313 0027 06       		.byte	0x6
 314 0028 C8010000 		.4byte	.LASF0
 315 002c 02       		.uleb128 0x2
 316 002d 01       		.byte	0x1
 317 002e 08       		.byte	0x8
 318 002f 0C010000 		.4byte	.LASF1
 319 0033 02       		.uleb128 0x2
 320 0034 02       		.byte	0x2
 321 0035 05       		.byte	0x5
 322 0036 A3010000 		.4byte	.LASF2
 323 003a 02       		.uleb128 0x2
ARM GAS  /tmp/ccG4Ri7g.s 			page 8


 324 003b 02       		.byte	0x2
 325 003c 07       		.byte	0x7
 326 003d 3B010000 		.4byte	.LASF3
 327 0041 02       		.uleb128 0x2
 328 0042 04       		.byte	0x4
 329 0043 05       		.byte	0x5
 330 0044 B6010000 		.4byte	.LASF4
 331 0048 03       		.uleb128 0x3
 332 0049 4E010000 		.4byte	.LASF9
 333 004d 02       		.byte	0x2
 334 004e 41       		.byte	0x41
 335 004f 53000000 		.4byte	0x53
 336 0053 02       		.uleb128 0x2
 337 0054 04       		.byte	0x4
 338 0055 07       		.byte	0x7
 339 0056 29010000 		.4byte	.LASF5
 340 005a 02       		.uleb128 0x2
 341 005b 08       		.byte	0x8
 342 005c 05       		.byte	0x5
 343 005d 89010000 		.4byte	.LASF6
 344 0061 02       		.uleb128 0x2
 345 0062 08       		.byte	0x8
 346 0063 07       		.byte	0x7
 347 0064 6D010000 		.4byte	.LASF7
 348 0068 04       		.uleb128 0x4
 349 0069 04       		.byte	0x4
 350 006a 05       		.byte	0x5
 351 006b 696E7400 		.ascii	"int\000"
 352 006f 02       		.uleb128 0x2
 353 0070 04       		.byte	0x4
 354 0071 07       		.byte	0x7
 355 0072 60010000 		.4byte	.LASF8
 356 0076 03       		.uleb128 0x3
 357 0077 AD010000 		.4byte	.LASF10
 358 007b 03       		.byte	0x3
 359 007c 30       		.byte	0x30
 360 007d 48000000 		.4byte	0x48
 361 0081 05       		.uleb128 0x5
 362 0082 01       		.byte	0x1
 363 0083 42000000 		.4byte	.LASF25
 364 0087 01       		.byte	0x1
 365 0088 14       		.byte	0x14
 366 0089 01       		.byte	0x1
 367 008a 00000000 		.4byte	.LFB0
 368 008e 34000000 		.4byte	.LFE0
 369 0092 00000000 		.4byte	.LLST0
 370 0096 01       		.byte	0x1
 371 0097 D0000000 		.4byte	0xd0
 372 009b 06       		.uleb128 0x6
 373 009c 7800     		.ascii	"x\000"
 374 009e 01       		.byte	0x1
 375 009f 14       		.byte	0x14
 376 00a0 68000000 		.4byte	0x68
 377 00a4 02       		.byte	0x2
 378 00a5 91       		.byte	0x91
 379 00a6 74       		.sleb128 -12
 380 00a7 06       		.uleb128 0x6
ARM GAS  /tmp/ccG4Ri7g.s 			page 9


 381 00a8 7900     		.ascii	"y\000"
 382 00aa 01       		.byte	0x1
 383 00ab 14       		.byte	0x14
 384 00ac 68000000 		.4byte	0x68
 385 00b0 02       		.byte	0x2
 386 00b1 91       		.byte	0x91
 387 00b2 70       		.sleb128 -16
 388 00b3 07       		.uleb128 0x7
 389 00b4 59010000 		.4byte	.LASF11
 390 00b8 01       		.byte	0x1
 391 00b9 14       		.byte	0x14
 392 00ba 68000000 		.4byte	0x68
 393 00be 02       		.byte	0x2
 394 00bf 91       		.byte	0x91
 395 00c0 6C       		.sleb128 -20
 396 00c1 08       		.uleb128 0x8
 397 00c2 00000000 		.4byte	.LASF15
 398 00c6 01       		.byte	0x1
 399 00c7 15       		.byte	0x15
 400 00c8 68000000 		.4byte	0x68
 401 00cc 02       		.byte	0x2
 402 00cd 91       		.byte	0x91
 403 00ce 7C       		.sleb128 -4
 404 00cf 00       		.byte	0
 405 00d0 09       		.uleb128 0x9
 406 00d1 01       		.byte	0x1
 407 00d2 0C000000 		.4byte	.LASF13
 408 00d6 01       		.byte	0x1
 409 00d7 1B       		.byte	0x1b
 410 00d8 01       		.byte	0x1
 411 00d9 76000000 		.4byte	0x76
 412 00dd 34000000 		.4byte	.LFB1
 413 00e1 50000000 		.4byte	.LFE1
 414 00e5 20000000 		.4byte	.LLST1
 415 00e9 01       		.byte	0x1
 416 00ea FD000000 		.4byte	0xfd
 417 00ee 07       		.uleb128 0x7
 418 00ef 7B000000 		.4byte	.LASF12
 419 00f3 01       		.byte	0x1
 420 00f4 1B       		.byte	0x1b
 421 00f5 68000000 		.4byte	0x68
 422 00f9 02       		.byte	0x2
 423 00fa 91       		.byte	0x91
 424 00fb 7C       		.sleb128 -4
 425 00fc 00       		.byte	0
 426 00fd 09       		.uleb128 0x9
 427 00fe 01       		.byte	0x1
 428 00ff 53000000 		.4byte	.LASF14
 429 0103 01       		.byte	0x1
 430 0104 21       		.byte	0x21
 431 0105 01       		.byte	0x1
 432 0106 46010000 		.4byte	0x146
 433 010a 50000000 		.4byte	.LFB2
 434 010e 80000000 		.4byte	.LFE2
 435 0112 40000000 		.4byte	.LLST2
 436 0116 01       		.byte	0x1
 437 0117 46010000 		.4byte	0x146
ARM GAS  /tmp/ccG4Ri7g.s 			page 10


 438 011b 07       		.uleb128 0x7
 439 011c 7B000000 		.4byte	.LASF12
 440 0120 01       		.byte	0x1
 441 0121 21       		.byte	0x21
 442 0122 68000000 		.4byte	0x68
 443 0126 02       		.byte	0x2
 444 0127 91       		.byte	0x91
 445 0128 74       		.sleb128 -12
 446 0129 08       		.uleb128 0x8
 447 012a 4C000000 		.4byte	.LASF16
 448 012e 01       		.byte	0x1
 449 012f 23       		.byte	0x23
 450 0130 68000000 		.4byte	0x68
 451 0134 02       		.byte	0x2
 452 0135 91       		.byte	0x91
 453 0136 7C       		.sleb128 -4
 454 0137 08       		.uleb128 0x8
 455 0138 1A010000 		.4byte	.LASF17
 456 013c 01       		.byte	0x1
 457 013d 23       		.byte	0x23
 458 013e 68000000 		.4byte	0x68
 459 0142 02       		.byte	0x2
 460 0143 91       		.byte	0x91
 461 0144 78       		.sleb128 -8
 462 0145 00       		.byte	0
 463 0146 02       		.uleb128 0x2
 464 0147 01       		.byte	0x1
 465 0148 02       		.byte	0x2
 466 0149 D4010000 		.4byte	.LASF18
 467 014d 0A       		.uleb128 0xa
 468 014e 01       		.byte	0x1
 469 014f 62000000 		.4byte	.LASF26
 470 0153 01       		.byte	0x1
 471 0154 2E       		.byte	0x2e
 472 0155 01       		.byte	0x1
 473 0156 80000000 		.4byte	.LFB3
 474 015a 98000000 		.4byte	.LFE3
 475 015e 02       		.byte	0x2
 476 015f 7D       		.byte	0x7d
 477 0160 00       		.sleb128 0
 478 0161 01       		.byte	0x1
 479 0162 0B       		.uleb128 0xb
 480 0163 01       		.byte	0x1
 481 0164 84010000 		.4byte	.LASF19
 482 0168 01       		.byte	0x1
 483 0169 40       		.byte	0x40
 484 016a 01       		.byte	0x1
 485 016b 68000000 		.4byte	0x68
 486 016f 98000000 		.4byte	.LFB4
 487 0173 CE000000 		.4byte	.LFE4
 488 0177 60000000 		.4byte	.LLST3
 489 017b 01       		.byte	0x1
 490 017c AD010000 		.4byte	0x1ad
 491 0180 0C       		.uleb128 0xc
 492 0181 9C000000 		.4byte	.LBB2
 493 0185 CC000000 		.4byte	.LBE2
 494 0189 0D       		.uleb128 0xd
ARM GAS  /tmp/ccG4Ri7g.s 			page 11


 495 018a 7800     		.ascii	"x\000"
 496 018c 01       		.byte	0x1
 497 018d 45       		.byte	0x45
 498 018e 68000000 		.4byte	0x68
 499 0192 02       		.byte	0x2
 500 0193 91       		.byte	0x91
 501 0194 74       		.sleb128 -12
 502 0195 0C       		.uleb128 0xc
 503 0196 A2000000 		.4byte	.LBB3
 504 019a C0000000 		.4byte	.LBE3
 505 019e 0D       		.uleb128 0xd
 506 019f 7900     		.ascii	"y\000"
 507 01a1 01       		.byte	0x1
 508 01a2 46       		.byte	0x46
 509 01a3 68000000 		.4byte	0x68
 510 01a7 02       		.byte	0x2
 511 01a8 91       		.byte	0x91
 512 01a9 70       		.sleb128 -16
 513 01aa 00       		.byte	0
 514 01ab 00       		.byte	0
 515 01ac 00       		.byte	0
 516 01ad 0E       		.uleb128 0xe
 517 01ae 80000000 		.4byte	.LASF20
 518 01b2 01       		.byte	0x1
 519 01b3 0C       		.byte	0xc
 520 01b4 BF010000 		.4byte	0x1bf
 521 01b8 01       		.byte	0x1
 522 01b9 05       		.byte	0x5
 523 01ba 03       		.byte	0x3
 524 01bb 00000000 		.4byte	SW_REGS
 525 01bf 0F       		.uleb128 0xf
 526 01c0 04       		.byte	0x4
 527 01c1 C5010000 		.4byte	0x1c5
 528 01c5 10       		.uleb128 0x10
 529 01c6 76000000 		.4byte	0x76
 530 01ca 0E       		.uleb128 0xe
 531 01cb BF010000 		.4byte	.LASF21
 532 01cf 01       		.byte	0x1
 533 01d0 0D       		.byte	0xd
 534 01d1 BF010000 		.4byte	0x1bf
 535 01d5 01       		.byte	0x1
 536 01d6 05       		.byte	0x5
 537 01d7 03       		.byte	0x3
 538 01d8 00000000 		.4byte	PIX_REGS
 539 01dc 00       		.byte	0
 540              		.section	.debug_abbrev,"",%progbits
 541              	.Ldebug_abbrev0:
 542 0000 01       		.uleb128 0x1
 543 0001 11       		.uleb128 0x11
 544 0002 01       		.byte	0x1
 545 0003 25       		.uleb128 0x25
 546 0004 0E       		.uleb128 0xe
 547 0005 13       		.uleb128 0x13
 548 0006 0B       		.uleb128 0xb
 549 0007 03       		.uleb128 0x3
 550 0008 0E       		.uleb128 0xe
 551 0009 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccG4Ri7g.s 			page 12


 552 000a 0E       		.uleb128 0xe
 553 000b 11       		.uleb128 0x11
 554 000c 01       		.uleb128 0x1
 555 000d 12       		.uleb128 0x12
 556 000e 01       		.uleb128 0x1
 557 000f 10       		.uleb128 0x10
 558 0010 06       		.uleb128 0x6
 559 0011 00       		.byte	0
 560 0012 00       		.byte	0
 561 0013 02       		.uleb128 0x2
 562 0014 24       		.uleb128 0x24
 563 0015 00       		.byte	0
 564 0016 0B       		.uleb128 0xb
 565 0017 0B       		.uleb128 0xb
 566 0018 3E       		.uleb128 0x3e
 567 0019 0B       		.uleb128 0xb
 568 001a 03       		.uleb128 0x3
 569 001b 0E       		.uleb128 0xe
 570 001c 00       		.byte	0
 571 001d 00       		.byte	0
 572 001e 03       		.uleb128 0x3
 573 001f 16       		.uleb128 0x16
 574 0020 00       		.byte	0
 575 0021 03       		.uleb128 0x3
 576 0022 0E       		.uleb128 0xe
 577 0023 3A       		.uleb128 0x3a
 578 0024 0B       		.uleb128 0xb
 579 0025 3B       		.uleb128 0x3b
 580 0026 0B       		.uleb128 0xb
 581 0027 49       		.uleb128 0x49
 582 0028 13       		.uleb128 0x13
 583 0029 00       		.byte	0
 584 002a 00       		.byte	0
 585 002b 04       		.uleb128 0x4
 586 002c 24       		.uleb128 0x24
 587 002d 00       		.byte	0
 588 002e 0B       		.uleb128 0xb
 589 002f 0B       		.uleb128 0xb
 590 0030 3E       		.uleb128 0x3e
 591 0031 0B       		.uleb128 0xb
 592 0032 03       		.uleb128 0x3
 593 0033 08       		.uleb128 0x8
 594 0034 00       		.byte	0
 595 0035 00       		.byte	0
 596 0036 05       		.uleb128 0x5
 597 0037 2E       		.uleb128 0x2e
 598 0038 01       		.byte	0x1
 599 0039 3F       		.uleb128 0x3f
 600 003a 0C       		.uleb128 0xc
 601 003b 03       		.uleb128 0x3
 602 003c 0E       		.uleb128 0xe
 603 003d 3A       		.uleb128 0x3a
 604 003e 0B       		.uleb128 0xb
 605 003f 3B       		.uleb128 0x3b
 606 0040 0B       		.uleb128 0xb
 607 0041 27       		.uleb128 0x27
 608 0042 0C       		.uleb128 0xc
ARM GAS  /tmp/ccG4Ri7g.s 			page 13


 609 0043 11       		.uleb128 0x11
 610 0044 01       		.uleb128 0x1
 611 0045 12       		.uleb128 0x12
 612 0046 01       		.uleb128 0x1
 613 0047 40       		.uleb128 0x40
 614 0048 06       		.uleb128 0x6
 615 0049 9742     		.uleb128 0x2117
 616 004b 0C       		.uleb128 0xc
 617 004c 01       		.uleb128 0x1
 618 004d 13       		.uleb128 0x13
 619 004e 00       		.byte	0
 620 004f 00       		.byte	0
 621 0050 06       		.uleb128 0x6
 622 0051 05       		.uleb128 0x5
 623 0052 00       		.byte	0
 624 0053 03       		.uleb128 0x3
 625 0054 08       		.uleb128 0x8
 626 0055 3A       		.uleb128 0x3a
 627 0056 0B       		.uleb128 0xb
 628 0057 3B       		.uleb128 0x3b
 629 0058 0B       		.uleb128 0xb
 630 0059 49       		.uleb128 0x49
 631 005a 13       		.uleb128 0x13
 632 005b 02       		.uleb128 0x2
 633 005c 0A       		.uleb128 0xa
 634 005d 00       		.byte	0
 635 005e 00       		.byte	0
 636 005f 07       		.uleb128 0x7
 637 0060 05       		.uleb128 0x5
 638 0061 00       		.byte	0
 639 0062 03       		.uleb128 0x3
 640 0063 0E       		.uleb128 0xe
 641 0064 3A       		.uleb128 0x3a
 642 0065 0B       		.uleb128 0xb
 643 0066 3B       		.uleb128 0x3b
 644 0067 0B       		.uleb128 0xb
 645 0068 49       		.uleb128 0x49
 646 0069 13       		.uleb128 0x13
 647 006a 02       		.uleb128 0x2
 648 006b 0A       		.uleb128 0xa
 649 006c 00       		.byte	0
 650 006d 00       		.byte	0
 651 006e 08       		.uleb128 0x8
 652 006f 34       		.uleb128 0x34
 653 0070 00       		.byte	0
 654 0071 03       		.uleb128 0x3
 655 0072 0E       		.uleb128 0xe
 656 0073 3A       		.uleb128 0x3a
 657 0074 0B       		.uleb128 0xb
 658 0075 3B       		.uleb128 0x3b
 659 0076 0B       		.uleb128 0xb
 660 0077 49       		.uleb128 0x49
 661 0078 13       		.uleb128 0x13
 662 0079 02       		.uleb128 0x2
 663 007a 0A       		.uleb128 0xa
 664 007b 00       		.byte	0
 665 007c 00       		.byte	0
ARM GAS  /tmp/ccG4Ri7g.s 			page 14


 666 007d 09       		.uleb128 0x9
 667 007e 2E       		.uleb128 0x2e
 668 007f 01       		.byte	0x1
 669 0080 3F       		.uleb128 0x3f
 670 0081 0C       		.uleb128 0xc
 671 0082 03       		.uleb128 0x3
 672 0083 0E       		.uleb128 0xe
 673 0084 3A       		.uleb128 0x3a
 674 0085 0B       		.uleb128 0xb
 675 0086 3B       		.uleb128 0x3b
 676 0087 0B       		.uleb128 0xb
 677 0088 27       		.uleb128 0x27
 678 0089 0C       		.uleb128 0xc
 679 008a 49       		.uleb128 0x49
 680 008b 13       		.uleb128 0x13
 681 008c 11       		.uleb128 0x11
 682 008d 01       		.uleb128 0x1
 683 008e 12       		.uleb128 0x12
 684 008f 01       		.uleb128 0x1
 685 0090 40       		.uleb128 0x40
 686 0091 06       		.uleb128 0x6
 687 0092 9742     		.uleb128 0x2117
 688 0094 0C       		.uleb128 0xc
 689 0095 01       		.uleb128 0x1
 690 0096 13       		.uleb128 0x13
 691 0097 00       		.byte	0
 692 0098 00       		.byte	0
 693 0099 0A       		.uleb128 0xa
 694 009a 2E       		.uleb128 0x2e
 695 009b 00       		.byte	0
 696 009c 3F       		.uleb128 0x3f
 697 009d 0C       		.uleb128 0xc
 698 009e 03       		.uleb128 0x3
 699 009f 0E       		.uleb128 0xe
 700 00a0 3A       		.uleb128 0x3a
 701 00a1 0B       		.uleb128 0xb
 702 00a2 3B       		.uleb128 0x3b
 703 00a3 0B       		.uleb128 0xb
 704 00a4 27       		.uleb128 0x27
 705 00a5 0C       		.uleb128 0xc
 706 00a6 11       		.uleb128 0x11
 707 00a7 01       		.uleb128 0x1
 708 00a8 12       		.uleb128 0x12
 709 00a9 01       		.uleb128 0x1
 710 00aa 40       		.uleb128 0x40
 711 00ab 0A       		.uleb128 0xa
 712 00ac 9742     		.uleb128 0x2117
 713 00ae 0C       		.uleb128 0xc
 714 00af 00       		.byte	0
 715 00b0 00       		.byte	0
 716 00b1 0B       		.uleb128 0xb
 717 00b2 2E       		.uleb128 0x2e
 718 00b3 01       		.byte	0x1
 719 00b4 3F       		.uleb128 0x3f
 720 00b5 0C       		.uleb128 0xc
 721 00b6 03       		.uleb128 0x3
 722 00b7 0E       		.uleb128 0xe
ARM GAS  /tmp/ccG4Ri7g.s 			page 15


 723 00b8 3A       		.uleb128 0x3a
 724 00b9 0B       		.uleb128 0xb
 725 00ba 3B       		.uleb128 0x3b
 726 00bb 0B       		.uleb128 0xb
 727 00bc 27       		.uleb128 0x27
 728 00bd 0C       		.uleb128 0xc
 729 00be 49       		.uleb128 0x49
 730 00bf 13       		.uleb128 0x13
 731 00c0 11       		.uleb128 0x11
 732 00c1 01       		.uleb128 0x1
 733 00c2 12       		.uleb128 0x12
 734 00c3 01       		.uleb128 0x1
 735 00c4 40       		.uleb128 0x40
 736 00c5 06       		.uleb128 0x6
 737 00c6 9642     		.uleb128 0x2116
 738 00c8 0C       		.uleb128 0xc
 739 00c9 01       		.uleb128 0x1
 740 00ca 13       		.uleb128 0x13
 741 00cb 00       		.byte	0
 742 00cc 00       		.byte	0
 743 00cd 0C       		.uleb128 0xc
 744 00ce 0B       		.uleb128 0xb
 745 00cf 01       		.byte	0x1
 746 00d0 11       		.uleb128 0x11
 747 00d1 01       		.uleb128 0x1
 748 00d2 12       		.uleb128 0x12
 749 00d3 01       		.uleb128 0x1
 750 00d4 00       		.byte	0
 751 00d5 00       		.byte	0
 752 00d6 0D       		.uleb128 0xd
 753 00d7 34       		.uleb128 0x34
 754 00d8 00       		.byte	0
 755 00d9 03       		.uleb128 0x3
 756 00da 08       		.uleb128 0x8
 757 00db 3A       		.uleb128 0x3a
 758 00dc 0B       		.uleb128 0xb
 759 00dd 3B       		.uleb128 0x3b
 760 00de 0B       		.uleb128 0xb
 761 00df 49       		.uleb128 0x49
 762 00e0 13       		.uleb128 0x13
 763 00e1 02       		.uleb128 0x2
 764 00e2 0A       		.uleb128 0xa
 765 00e3 00       		.byte	0
 766 00e4 00       		.byte	0
 767 00e5 0E       		.uleb128 0xe
 768 00e6 34       		.uleb128 0x34
 769 00e7 00       		.byte	0
 770 00e8 03       		.uleb128 0x3
 771 00e9 0E       		.uleb128 0xe
 772 00ea 3A       		.uleb128 0x3a
 773 00eb 0B       		.uleb128 0xb
 774 00ec 3B       		.uleb128 0x3b
 775 00ed 0B       		.uleb128 0xb
 776 00ee 49       		.uleb128 0x49
 777 00ef 13       		.uleb128 0x13
 778 00f0 3F       		.uleb128 0x3f
 779 00f1 0C       		.uleb128 0xc
ARM GAS  /tmp/ccG4Ri7g.s 			page 16


 780 00f2 02       		.uleb128 0x2
 781 00f3 0A       		.uleb128 0xa
 782 00f4 00       		.byte	0
 783 00f5 00       		.byte	0
 784 00f6 0F       		.uleb128 0xf
 785 00f7 0F       		.uleb128 0xf
 786 00f8 00       		.byte	0
 787 00f9 0B       		.uleb128 0xb
 788 00fa 0B       		.uleb128 0xb
 789 00fb 49       		.uleb128 0x49
 790 00fc 13       		.uleb128 0x13
 791 00fd 00       		.byte	0
 792 00fe 00       		.byte	0
 793 00ff 10       		.uleb128 0x10
 794 0100 35       		.uleb128 0x35
 795 0101 00       		.byte	0
 796 0102 49       		.uleb128 0x49
 797 0103 13       		.uleb128 0x13
 798 0104 00       		.byte	0
 799 0105 00       		.byte	0
 800 0106 00       		.byte	0
 801              		.section	.debug_loc,"",%progbits
 802              	.Ldebug_loc0:
 803              	.LLST0:
 804 0000 00000000 		.4byte	.LFB0-.Ltext0
 805 0004 02000000 		.4byte	.LCFI0-.Ltext0
 806 0008 0200     		.2byte	0x2
 807 000a 7D       		.byte	0x7d
 808 000b 00       		.sleb128 0
 809 000c 02000000 		.4byte	.LCFI0-.Ltext0
 810 0010 34000000 		.4byte	.LFE0-.Ltext0
 811 0014 0200     		.2byte	0x2
 812 0016 7D       		.byte	0x7d
 813 0017 18       		.sleb128 24
 814 0018 00000000 		.4byte	0
 815 001c 00000000 		.4byte	0
 816              	.LLST1:
 817 0020 34000000 		.4byte	.LFB1-.Ltext0
 818 0024 36000000 		.4byte	.LCFI1-.Ltext0
 819 0028 0200     		.2byte	0x2
 820 002a 7D       		.byte	0x7d
 821 002b 00       		.sleb128 0
 822 002c 36000000 		.4byte	.LCFI1-.Ltext0
 823 0030 50000000 		.4byte	.LFE1-.Ltext0
 824 0034 0200     		.2byte	0x2
 825 0036 7D       		.byte	0x7d
 826 0037 08       		.sleb128 8
 827 0038 00000000 		.4byte	0
 828 003c 00000000 		.4byte	0
 829              	.LLST2:
 830 0040 50000000 		.4byte	.LFB2-.Ltext0
 831 0044 52000000 		.4byte	.LCFI2-.Ltext0
 832 0048 0200     		.2byte	0x2
 833 004a 7D       		.byte	0x7d
 834 004b 00       		.sleb128 0
 835 004c 52000000 		.4byte	.LCFI2-.Ltext0
 836 0050 80000000 		.4byte	.LFE2-.Ltext0
ARM GAS  /tmp/ccG4Ri7g.s 			page 17


 837 0054 0200     		.2byte	0x2
 838 0056 7D       		.byte	0x7d
 839 0057 10       		.sleb128 16
 840 0058 00000000 		.4byte	0
 841 005c 00000000 		.4byte	0
 842              	.LLST3:
 843 0060 98000000 		.4byte	.LFB4-.Ltext0
 844 0064 9A000000 		.4byte	.LCFI3-.Ltext0
 845 0068 0200     		.2byte	0x2
 846 006a 7D       		.byte	0x7d
 847 006b 00       		.sleb128 0
 848 006c 9A000000 		.4byte	.LCFI3-.Ltext0
 849 0070 9C000000 		.4byte	.LCFI4-.Ltext0
 850 0074 0200     		.2byte	0x2
 851 0076 7D       		.byte	0x7d
 852 0077 04       		.sleb128 4
 853 0078 9C000000 		.4byte	.LCFI4-.Ltext0
 854 007c CE000000 		.4byte	.LFE4-.Ltext0
 855 0080 0200     		.2byte	0x2
 856 0082 7D       		.byte	0x7d
 857 0083 10       		.sleb128 16
 858 0084 00000000 		.4byte	0
 859 0088 00000000 		.4byte	0
 860              		.section	.debug_aranges,"",%progbits
 861 0000 1C000000 		.4byte	0x1c
 862 0004 0200     		.2byte	0x2
 863 0006 00000000 		.4byte	.Ldebug_info0
 864 000a 04       		.byte	0x4
 865 000b 00       		.byte	0
 866 000c 0000     		.2byte	0
 867 000e 0000     		.2byte	0
 868 0010 00000000 		.4byte	.Ltext0
 869 0014 CE000000 		.4byte	.Letext0-.Ltext0
 870 0018 00000000 		.4byte	0
 871 001c 00000000 		.4byte	0
 872              		.section	.debug_line,"",%progbits
 873              	.Ldebug_line0:
 874 0000 0B010000 		.section	.debug_str,"MS",%progbits,1
 874      0200BF00 
 874      00000201 
 874      FB0E0D00 
 874      01010101 
 875              	.LASF15:
 876 0000 7069785F 		.ascii	"pix_address\000"
 876      61646472 
 876      65737300 
 877              	.LASF13:
 878 000c 72656164 		.ascii	"read_switches\000"
 878      5F737769 
 878      74636865 
 878      7300
 879              	.LASF24:
 880 001a 2F686F6D 		.ascii	"/home/ks6n19/Documents/project/software\000"
 880      652F6B73 
 880      366E3139 
 880      2F446F63 
 880      756D656E 
ARM GAS  /tmp/ccG4Ri7g.s 			page 18


 881              	.LASF25:
 882 0042 77726974 		.ascii	"write_pix\000"
 882      655F7069 
 882      7800
 883              	.LASF16:
 884 004c 73746174 		.ascii	"status\000"
 884      757300
 885              	.LASF14:
 886 0053 63686563 		.ascii	"check_switches\000"
 886      6B5F7377 
 886      69746368 
 886      657300
 887              	.LASF26:
 888 0062 77616974 		.ascii	"wait_for_any_switch_data\000"
 888      5F666F72 
 888      5F616E79 
 888      5F737769 
 888      7463685F 
 889              	.LASF12:
 890 007b 61646472 		.ascii	"addr\000"
 890      00
 891              	.LASF20:
 892 0080 53575F52 		.ascii	"SW_REGS\000"
 892      45475300 
 893              	.LASF22:
 894 0088 474E5520 		.ascii	"GNU C11 5.4.1 20160919 (release) [ARM/embedded-5-br"
 894      43313120 
 894      352E342E 
 894      31203230 
 894      31363039 
 895 00bb 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m0 -mthumb -gdwa"
 895      20726576 
 895      6973696F 
 895      6E203234 
 895      30343936 
 896 00ee 72662D32 		.ascii	"rf-2 -O0 -fomit-frame-pointer\000"
 896      202D4F30 
 896      202D666F 
 896      6D69742D 
 896      6672616D 
 897              	.LASF1:
 898 010c 756E7369 		.ascii	"unsigned char\000"
 898      676E6564 
 898      20636861 
 898      7200
 899              	.LASF17:
 900 011a 73776974 		.ascii	"switches_ready\000"
 900      63686573 
 900      5F726561 
 900      647900
 901              	.LASF5:
 902 0129 6C6F6E67 		.ascii	"long unsigned int\000"
 902      20756E73 
 902      69676E65 
 902      6420696E 
 902      7400
 903              	.LASF3:
ARM GAS  /tmp/ccG4Ri7g.s 			page 19


 904 013b 73686F72 		.ascii	"short unsigned int\000"
 904      7420756E 
 904      7369676E 
 904      65642069 
 904      6E7400
 905              	.LASF9:
 906 014e 5F5F7569 		.ascii	"__uint32_t\000"
 906      6E743332 
 906      5F7400
 907              	.LASF11:
 908 0159 636F6C6F 		.ascii	"colour\000"
 908      757200
 909              	.LASF8:
 910 0160 756E7369 		.ascii	"unsigned int\000"
 910      676E6564 
 910      20696E74 
 910      00
 911              	.LASF7:
 912 016d 6C6F6E67 		.ascii	"long long unsigned int\000"
 912      206C6F6E 
 912      6720756E 
 912      7369676E 
 912      65642069 
 913              	.LASF19:
 914 0184 6D61696E 		.ascii	"main\000"
 914      00
 915              	.LASF6:
 916 0189 6C6F6E67 		.ascii	"long long int\000"
 916      206C6F6E 
 916      6720696E 
 916      7400
 917              	.LASF23:
 918 0197 636F6465 		.ascii	"code/main.c\000"
 918      2F6D6169 
 918      6E2E6300 
 919              	.LASF2:
 920 01a3 73686F72 		.ascii	"short int\000"
 920      7420696E 
 920      7400
 921              	.LASF10:
 922 01ad 75696E74 		.ascii	"uint32_t\000"
 922      33325F74 
 922      00
 923              	.LASF4:
 924 01b6 6C6F6E67 		.ascii	"long int\000"
 924      20696E74 
 924      00
 925              	.LASF21:
 926 01bf 5049585F 		.ascii	"PIX_REGS\000"
 926      52454753 
 926      00
 927              	.LASF0:
 928 01c8 7369676E 		.ascii	"signed char\000"
 928      65642063 
 928      68617200 
 929              	.LASF18:
 930 01d4 5F426F6F 		.ascii	"_Bool\000"
ARM GAS  /tmp/ccG4Ri7g.s 			page 20


 930      6C00
 931              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccG4Ri7g.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccG4Ri7g.s:57     .data:00000000 SW_REGS
     /tmp/ccG4Ri7g.s:54     .data:00000000 $d
     /tmp/ccG4Ri7g.s:63     .data:00000004 PIX_REGS
     /tmp/ccG4Ri7g.s:66     .text:00000000 $t
     /tmp/ccG4Ri7g.s:71     .text:00000000 write_pix
     /tmp/ccG4Ri7g.s:111    .text:00000030 $d
     /tmp/ccG4Ri7g.s:115    .text:00000034 $t
     /tmp/ccG4Ri7g.s:120    .text:00000034 read_switches
     /tmp/ccG4Ri7g.s:146    .text:0000004c $d
     /tmp/ccG4Ri7g.s:150    .text:00000050 $t
     /tmp/ccG4Ri7g.s:155    .text:00000050 check_switches
     /tmp/ccG4Ri7g.s:194    .text:0000007c $d
     /tmp/ccG4Ri7g.s:198    .text:00000080 $t
     /tmp/ccG4Ri7g.s:203    .text:00000080 wait_for_any_switch_data
     /tmp/ccG4Ri7g.s:228    .text:00000094 $d
     /tmp/ccG4Ri7g.s:232    .text:00000098 $t
     /tmp/ccG4Ri7g.s:237    .text:00000098 main
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
